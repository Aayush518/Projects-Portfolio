---
import '../styles/performance.css';
import '../styles/globals.css';
import Navigation from '../components/Navigation';
import PageTransition from '../components/PageTransition';
import CustomCursor from '../components/CustomCursor';
import ScrollProgress from '../components/ScrollProgress';
import ScrollToTop from '../components/ScrollToTop';

interface Props {
  title: string;
}

const { title } = Astro.props;

// Generate critical CSS inline
const criticalCss = `
  html, body {
    background-color: #0A0B1E;
    margin: 0;
    padding: 0;
    opacity: 1 !important;
    visibility: visible !important;
  }
  
  .fixed-bg {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -10;
    background-color: #0A0B1E;
  }
`;
---

<!doctype html>
<html lang="en" class="optimize-performance disable-animations">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Aayush518's Portfolio - Full Stack Developer & Project Lead" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
    <meta name="theme-color" content="#0A0B1E">
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- Font display swap for better performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- Critical CSS inline for faster rendering -->
    <style set:html={criticalCss}></style>

    <!-- Preload critical fonts with high fetchpriority -->
    <link rel="preload" href="/fonts/Inter-Regular.woff2" as="font" type="font/woff2" crossorigin fetchpriority="high">
    <link rel="preload" href="/fonts/ClashDisplay-Medium.woff2" as="font" type="font/woff2" crossorigin fetchpriority="high">
  </head>
  <body>
    <!-- Immediately visible static background -->
    <div class="fixed-bg"></div>

    <!-- Main content first for better FCP -->
    <main class="relative z-10">
      <slot />
    </main>
    
    <!-- Navigation visible early -->
    <Navigation client:load />
    
    <!-- Defer non-critical elements -->
    <CustomCursor client:idle />
    <ScrollProgress client:idle />
    <PageTransition client:load />
    <ScrollToTop client:idle />

    <script>
      // Performance optimization script
      document.addEventListener('DOMContentLoaded', () => {
        // Basic feature detection
        const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        const isLowEndDevice = 
          (('deviceMemory' in navigator) && (navigator as any).deviceMemory < 4) ||
          (('hardwareConcurrency' in navigator) && navigator.hardwareConcurrency < 4);
        
        // Apply appropriate classes
        if (prefersReducedMotion || isLowEndDevice) {
          document.documentElement.classList.add('low-end-device');
        }
        
        // Optimize image loading strategy based on connection
        if ('connection' in navigator && (navigator as any).connection?.effectiveType === 'slow-2g') {
          document.documentElement.classList.add('save-data');
        }
        
        // Remove animation blocker after initial render
        setTimeout(() => {
          document.documentElement.classList.remove('disable-animations');
        }, 300);
        
        // Set up optimized IntersectionObserver for lazy sections
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                entry.target.classList.add('is-visible');
                observer.unobserve(entry.target);
              }
            });
          },
          { threshold: 0.1, rootMargin: '100px' }
        );
        
        // Observe lazy sections
        document.querySelectorAll('.lazy-section, .animate-on-scroll').forEach(el => {
          observer.observe(el);
        });
      });
    </script>
  </body>
</html>