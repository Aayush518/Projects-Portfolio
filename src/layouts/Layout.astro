---
import '../styles/globals.css';
import Navigation from '../components/Navigation';
import { initializeMouseTracking } from '../utils/mouseTracker';
import PageTransition from '../components/PageTransition';
import CustomCursor from '../components/CustomCursor';
import ScrollProgress from '../components/ScrollProgress';
import NavIndicator from '../components/NavIndicator';
import DynamicBackground from '../components/DynamicBackground';
import { useSmoothScroll } from '../hooks/useSmoothScroll';
import ScrollToTop from '../components/ScrollToTop';

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Aayush518's Portfolio - Frontend Developer & Project Manager" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <!-- Preload critical fonts -->
    <link
      rel="preload"
      href="https://api.fontshare.com/v2/css?f[]=clash-display@600,700,500&display=swap"
      as="style"
    />
    <link
      rel="preload"
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      as="style"
    />
  </head>
  <body class="bg-dark text-light overflow-x-hidden">
    <PageTransition client:load />
    <CustomCursor client:load />
    <ScrollProgress client:load />
    <NavIndicator client:load />
    <DynamicBackground client:load />

    {/* Dynamic Background */}
    <div class="fixed inset-0 -z-10 will-change-transform">
      <div class="absolute inset-0 bg-[#0A0B1E]"></div>
      <div class="absolute inset-0 bg-gradient-to-b from-primary/5 via-transparent to-highlight/5"></div>
      <div class="absolute inset-0 bg-grid-pattern opacity-[0.02]"></div>
      
      {/* Animated Orbs - Optimized */}
      <div class="absolute top-1/4 left-1/4 w-96 h-96 bg-primary/20 rounded-full blur-3xl will-change-transform animate-float-optimized"></div>
      <div class="absolute bottom-1/4 right-1/4 w-96 h-96 bg-highlight/20 rounded-full blur-3xl will-change-transform animate-float-delayed-optimized"></div>
      
      {/* Static Background Elements */}
      <div class="absolute inset-0">
        <div class="absolute top-20 right-32 w-64 h-64 bg-accent/10 rounded-full blur-2xl"></div>
        <div class="absolute bottom-40 left-20 w-72 h-72 bg-highlight/10 rounded-full blur-2xl"></div>
      </div>
    </div>

    <Navigation client:load />
    <slot />
    <ScrollToTop client:load />

    <script>
      import 'gsap';
      import { ScrollTrigger } from 'gsap/ScrollTrigger';
      import { gsap } from 'gsap';

      gsap.registerPlugin(ScrollTrigger);
      useSmoothScroll();

      // Optimized scroll animations with improved debouncing
      const sections = gsap.utils.toArray('.fade-in-section');
      let timeout;
      let lastScrollTime = 0;
      const SCROLL_DEBOUNCE_DELAY = 50; // ms
      
      // Debounce scroll handler for better performance
      function debouncedScrollHandler() {
        const now = Date.now();
        if (now - lastScrollTime < SCROLL_DEBOUNCE_DELAY) {
          clearTimeout(timeout);
          timeout = setTimeout(debouncedScrollHandler, SCROLL_DEBOUNCE_DELAY);
          return;
        }
        
        lastScrollTime = now;
        
        sections.forEach((section) => {
          const rect = section.getBoundingClientRect();
          const isInView = rect.top < window.innerHeight - 100 && rect.bottom > 0;
          
          if (isInView && !section.classList.contains('animated')) {
            section.classList.add('animated');
            gsap.to(section, {
              opacity: 1,
              y: 0,
              duration: 0.8,
              ease: 'power2.out',
              overwrite: true
            });
          }
        });
      }
      
      // Set initial state
      sections.forEach((section) => {
        gsap.set(section, { opacity: 0, y: 30 });
      });
      
      // Add optimized event listener
      window.addEventListener('scroll', debouncedScrollHandler, { passive: true });
      
      // Initial check
      setTimeout(debouncedScrollHandler, 100);

      // Prevent transitions on page load
      document.documentElement.classList.add('preload');
      window.addEventListener('load', () => {
        document.documentElement.classList.remove('preload');
      });

      // Initialize mouse tracking
      initializeMouseTracking();
    </script>
  </body>
</html>

<style>
  .bg-grid-pattern {
    background-image: 
      linear-gradient(to right, rgba(255,255,255,.05) 1px, transparent 1px),
      linear-gradient(to bottom, rgba(255,255,255,.05) 1px, transparent 1px);
    background-size: 40px 40px;
  }
</style>